#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var RealServer = require('../routes/realServer');
var UserOnline = require('../models/UserOnlineModel');
var WaitingNoti = require('../models/WaitingNotiModel');
// var SocketSingleton = require('./socket');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

global.io = require('socket.io').listen(server);
global.socket_list = {};
io.sockets.on('connection', function (socket) {
  var data_user;
  console.log("Kết nối socket thành công");
  socket.on('connect-server', function (data) {
    data_user = JSON.parse(data);
    console.log("user id ket noi: " + data_user.mId);
    var newUserOnline = new UserOnline({
      name: data_user.mFullName,
      userID: data_user.mId
    });
    // lưu thông tin user online
    // newUserOnline.save(function (err, user) {
    //   if (err) {
    //     console.log("không thể lưu user online: "+err);
    //   } else {
    //     console.log("add user online: "+user);
    //   }
    // });
    global.socket_list[data_user.mId.toString()] = socket;


    // kiểm tra uesr có trong danh sách waiting noti hay không
    // nếu có thì gửi lại noti cho nó
    WaitingNoti.find({userID: data_user.mId})
    .populate('dataNoti')
    .exec((err,waitings) => {
      if (err) {
        console.log(err);
      }else if(waitings.length == 0) {
      } else {
        waitings.forEach(function (item_wating) {
          if (global.socket_list[item_wating.userID.toString()] != null) {
            console.log("goi emit notify-user-" + item_wating.userID.toString());
            global.socket_list[item_wating.userID.toString()].emit("notify-user-" + item_wating.userID.toString(), { nomal: item_wating.dataNoti });
            item_wating.remove((err) => {
              console.log(err);
            });
          } else {
            console.log("socket null");
           }
        });
      }
    });
  });

  socket.on('disconnect', function () {
    console.log('co nguoi offline');
    console.log(data_user);
    // global.socket_list.detele(data_user.mId.toString());
    if(data_user) {
      delete global.socket_list[data_user.mId.toString()];
    }
    // socket.emit('disconnected');
    // online = online - 1;

  });
  //       // //  socket.user = data;
  //       socket.user_email = data_user.mEmail;
  //       socket.emit("thongbao-user-"+socket.user_email,{mess : "xin chao"});
});


//     // socket.on('send_message', function (message) {
//     //     sockets.emit('receiver_message', {data: socket.user + ": "+ message});
// });
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var minutes = 1,
  the_interval = minutes * 60 * 1000;
setInterval(function () {
  //  ERC20obj.batchSendReward(Constant.OWNER_TOKEN_ADDRESS,
  //      Constant.PRV_KEY_OWNER,
  //      Constant.EESTY_TOKEN_ADDRESS).then(function(result) {
  //      console.log("RESULT batch: " + result);
  //  }).catch(function(err) {
  //      console.log("ERROR batch: " + err);
  //  })
  // console.log("1 phút trôi qua");
  realServer = new RealServer();
  realServer.setStatusPost();
  realServer.setStatusMeeting();
  realServer.sendNotiPostExpire();
  realServer.sendNotiMeeting();
}, the_interval);
